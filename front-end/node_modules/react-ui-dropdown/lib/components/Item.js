"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Item = (function (_Component) {
  _inherits(Item, _Component);

  function Item(props) {
    _classCallCheck(this, Item);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Item).call(this, props));

    _this.state = {
      focused: false
    };
    return _this;
  }

  _createClass(Item, [{
    key: "getId",
    value: function getId() {
      return this.props.idPrefix + "item-" + this.props.id;
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return "dropdown-item" + (this.state.focused ? " selected" : "");
    }
  }, {
    key: "hasImages",
    value: function hasImages() {
      return this.props.showImages && !!this.props.image;
    }
  }, {
    key: "hasSubtitle",
    value: function hasSubtitle() {
      return !!this.props.subtitle;
    }
  }, {
    key: "setFocused",
    value: function setFocused(value) {
      this.setState({
        focused: !!value
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "div",
        {
          className: this.getClassName(),
          id: this.getId(),
          hidden: this.props.selected,
          style: this.props.selected ? { display: "none" } : {},
          role: "option",
          tabIndex: "-1",
          onMouseDown: this.props.onClick,
          onMouseMove: this.props.onHover },
        this.hasImages() && _react2.default.createElement("img", {
          className: "dropdown-item-image",
          src: this.props.image,
          alt: "" }),
        _react2.default.createElement(
          "div",
          { className: "dropdown-item-title" },
          this.props.title,
          this.hasSubtitle() && _react2.default.createElement(
            "div",
            { className: "dropdown-item-subtitle" },
            this.props.subTitle
          )
        )
      );
    }
  }]);

  return Item;
})(_react.Component);

exports.default = Item;

Item.propTypes = {
  idPrefix: _react.PropTypes.string.isRequired,
  id: _react.PropTypes.number.isRequired,
  selected: _react.PropTypes.bool,
  image: _react.PropTypes.string,
  title: _react.PropTypes.string.isRequired,
  subTitle: _react.PropTypes.string,
  showImages: _react.PropTypes.bool,
  onClick: _react.PropTypes.func.isRequired,
  onHover: _react.PropTypes.func.isRequired
};
Item.defaultProps = {
  selected: false,
  showImages: true
};