"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./stylesheets/react-ui-dropdown.css");

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Items = require("./Items");

var _Items2 = _interopRequireDefault(_Items);

var _Item = require("./Item");

var _Item2 = _interopRequireDefault(_Item);

var _Label = require("./Label");

var _Label2 = _interopRequireDefault(_Label);

var _SearchInput = require("./SearchInput");

var _SearchInput2 = _interopRequireDefault(_SearchInput);

var _SelectedItem = require("./SelectedItem");

var _SelectedItem2 = _interopRequireDefault(_SelectedItem);

var _itemChecker = require("./../item-checker");

var _itemChecker2 = _interopRequireDefault(_itemChecker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Variable for store count of components in the scope.
 *
 * @type {Number}
 */
var idCounter = 0;

/**
 * Return unique id for component. Useful for id in HTML.
 *
 * @param {String} prefix
 * @returns {String}
 */
function uniqueId(prefix) {
  var id = ++idCounter;

  return prefix + id;
}

/**
 * Returns a function, that, as long as it continues to be invoked, will not be triggered.
 * The function will be called after it stops being called for N milliseconds.
 *
 * Code taken from article {@link https://davidwalsh.name/javascript-debounce-function|JavaScript Debounce Function}.
 *
 * @param {Function} func - Function which will need to call
 * @param {Number} wait - Milliseconds after func will be called
 * @returns {Function}
 */
function debounce(func, wait) {
  var timeout = undefined;
  return function () {
    var context = this,
        args = arguments;
    var later = function later() {
      timeout = null;
      func.apply(context, args);
    };
    var callNow = !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}

var ReactUIDropdown = (function (_Component) {
  _inherits(ReactUIDropdown, _Component);

  function ReactUIDropdown(props) {
    _classCallCheck(this, ReactUIDropdown);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReactUIDropdown).call(this, props));

    var items = _this.transformArrayToItems(props.initialItems, props.maxDisplayedItems);

    _this.state = {
      dropdownId: uniqueId("dropdown-") + "-",
      items: items,
      focusedItem: items.keys.displayed[0] || null,
      searchValue: ""
    };

    _this.sendRequest = debounce(_this.sendRequest, 500);
    return _this;
  }

  _createClass(ReactUIDropdown, [{
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps, nextState) {
      if (this.state.focusedItem != nextState.focusedItem) {
        var item = this.refs["item-" + this.state.focusedItem];
        if (item) item.setFocused(false);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevState.focusedItem != this.state.focusedItem) {
        var item = this.refs["item-" + this.state.focusedItem];
        if (item) item.setFocused(true);
      }
    }

    /**
     * Return keys of displayed items from state, which not selected.
     *
     * @returns {Array}
     */

  }, {
    key: "getNotSelectedItems",
    value: function getNotSelectedItems() {
      var _this2 = this;

      return this.state.items.keys.displayed.filter(function (itemKey) {
        return ! ~_this2.state.items.keys.selected.indexOf(itemKey);
      });
    }

    /**
     * Has component a source or not.
     *
     * @returns {boolean}
     */

  }, {
    key: "hasRemoteSearch",
    value: function hasRemoteSearch() {
      return !!(this.props.remoteSearch && this.props.remoteSearch.url);
    }
  }, {
    key: "handleSelectorClick",
    value: function handleSelectorClick() {
      this.refs.searchInput.refs.input.focus();
    }
  }, {
    key: "handleSearchInputChange",
    value: function handleSearchInputChange(e) {
      var _this3 = this;

      var searchValue = e.target.value;

      this.setState({
        searchValue: searchValue
      });

      var updateState = function updateState(displayedItemsKeys) {
        var items = _this3.state.items;
        items.keys.displayed = displayedItemsKeys;

        _this3.setState({
          items: items,
          focusedItem: items.keys.displayed.filter(function (itemKey) {
            return ! ~items.keys.selected.indexOf(itemKey);
          })[0] || null
        });
      };

      if (!searchValue.length) {
        updateState(this.state.items.keys.started);
        return;
      }

      this.goSearch(searchValue, function (foundItemsKeys) {
        updateState(foundItemsKeys.slice(0, _this3.props.maxDisplayedItems));
      });
    }
  }, {
    key: "handleSearchInputKeyDown",
    value: function handleSearchInputKeyDown(e) {
      var _this4 = this;

      var focusedItem = this.state.focusedItem;
      var displayedItems = this.getNotSelectedItems();
      var focusedItemIndex = displayedItems.indexOf(focusedItem);
      var updateState = function updateState(focusedItemIndex) {
        _this4.setState({
          focusedItem: displayedItems[focusedItemIndex] || null
        });
      };

      switch (e.key) {
        case "ArrowDown":
          updateState(focusedItemIndex < displayedItems.length - 1 ? focusedItemIndex + 1 : 0);
          break;
        case "ArrowUp":
          updateState(focusedItemIndex == 0 ? displayedItems.length - 1 : focusedItemIndex - 1);
          break;
        case "Enter":
          this.addItemToSelected(focusedItem);

          updateState(focusedItemIndex < displayedItems.length - 1 ? focusedItemIndex + 1 : focusedItemIndex - 1);
          break;
      }
    }
  }, {
    key: "handleSearchInputFocus",
    value: function handleSearchInputFocus() {
      this.refs.items.setHidden(false);
      this.setState({
        focusedItem: this.getNotSelectedItems()[0] || null
      });
      var item = this.refs["item-" + this.state.focusedItem];
      if (item) item.setFocused(true);
    }
  }, {
    key: "handleSearchInputBlur",
    value: function handleSearchInputBlur() {
      this.refs.items.setHidden(true);
      var item = this.refs["item-" + this.state.focusedItem];
      if (item) item.setFocused(false);
    }
  }, {
    key: "handleSelectedItemClick",
    value: function handleSelectedItemClick(itemKey) {
      this.removeItemFromSelected(itemKey);
    }
  }, {
    key: "handleItemClick",
    value: function handleItemClick(itemKey) {
      this.addItemToSelected(itemKey);
    }
  }, {
    key: "handleItemHover",
    value: function handleItemHover(itemKey) {
      if (this.state.focusedItem == itemKey) return;
      this.setState({
        focusedItem: itemKey
      });
    }
  }, {
    key: "dropdownChange",
    value: function dropdownChange() {
      var _this5 = this;

      if (!this.props.onChange) return;

      this.props.onChange(this.state.items.keys.selected.reduce(function (selectedItems, itemKey) {
        selectedItems.push(_this5.state.items.collection[itemKey]);
        return selectedItems;
      }, []));
    }

    /**
     * Transform array of data for suitable collection of items.
     *
     * @param {Array} data
     * @returns {{collection: {}, keys: {all: Array, started: Array, displayed: Array, selected: Array}}}
     */

  }, {
    key: "transformArrayToItems",
    value: function transformArrayToItems(data, maxDisplayedItems) {
      maxDisplayedItems = maxDisplayedItems || this.props.maxDisplayedItems;

      var items = {
        collection: {},
        keys: {
          all: [],
          started: [],
          displayed: [],
          selected: []
        }
      };

      if (data && data.length) {
        items.keys.all = data.map(function (item) {
          return item.id;
        });
        var startedItems = items.keys.all.slice(0, maxDisplayedItems);
        items.keys.started = startedItems;
        items.keys.displayed = startedItems;
        items.collection = data.reduce(function (obj, item) {
          obj[item.id] = item;
          return obj;
        }, {});
      }

      return items;
    }

    /**
     * Function create an ajax GET request to url and give response in callback.
     *
     * @param {string} url
     * @param {Function} callback
     */

  }, {
    key: "sendRequest",
    value: function sendRequest(url, callback) {
      var xhr = undefined;
      try {
        xhr = new ActiveXObject("Msxml2.XMLHTTP");
      } catch (e) {
        try {
          xhr = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (E) {
          xhr = false;
        }
      }
      if (!xhr && typeof XMLHttpRequest != "undefined") {
        xhr = new XMLHttpRequest();
      }

      xhr.open("GET", url, true);

      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
          if (xhr.status == 200) {
            callback(xhr);
          }
        }
      };

      xhr.send();
    }

    /**
     * Search item, which contain string like q. Search in local and on server.
     *
     * @param {string} q
     * @param {Function} callback
     */

  }, {
    key: "goSearch",
    value: function goSearch(q, callback) {
      var _this6 = this;

      if (!q.length) {
        return;
      }

      var foundItemsKeys = [];
      var fields = ["title"];

      this.state.items.keys.all.forEach(function (itemKey) {
        if (_itemChecker2.default.check(q, _this6.state.items.collection[itemKey], fields)) foundItemsKeys.push(itemKey);
      });

      if (!this.hasRemoteSearch()) {
        callback(foundItemsKeys);
        return;
      }

      this.sendRequest(this.props.remoteSearch.url + "?q=" + q + "&search_in=" + this.props.remoteSearch.fields, function (xhr) {
        var response = JSON.parse(xhr.responseText);
        var serverFoundItemsKeys = response.items.map(function (item) {
          return item.id;
        });

        if (serverFoundItemsKeys.length) {
          foundItemsKeys = foundItemsKeys.concat(serverFoundItemsKeys.filter(function (itemKey) {
            return ! ~foundItemsKeys.indexOf(itemKey);
          }));
        }

        callback(foundItemsKeys);
      });
    }

    /**
     * Add itemKey to array of selected items in state.
     * If component is multiple, itemKey will be added to array, else will create array contained only one selected item.
     *
     * @param {number} itemKey
     */

  }, {
    key: "addItemToSelected",
    value: function addItemToSelected(itemKey) {
      var items = this.state.items;
      items.keys.selected = this.props.multiple ? this.state.items.keys.selected.concat(itemKey) : [itemKey];

      this.setState({
        items: items
      });

      this.dropdownChange();
    }

    /**
     * Remove itemKey from array of selected items in state.
     *
     * @param {number} itemKey
     */

  }, {
    key: "removeItemFromSelected",
    value: function removeItemFromSelected(itemKey) {
      var s = this.state.items.keys.selected;

      s.splice(s.indexOf(itemKey), 1);

      var items = this.state.items;
      items.keys.selected = s;

      this.setState({
        items: items,
        focusedItem: this.state.items.keys.displayed.filter(function (itemKey) {
          return ! ~s.indexOf(itemKey);
        })[0]
      });

      this.dropdownChange();
    }
  }, {
    key: "render",
    value: function render() {
      var _this7 = this;

      var _state = this.state;
      var dropdownId = _state.dropdownId;
      var items = _state.items;

      return _react2.default.createElement(
        "div",
        { className: "dropdown" },
        _react2.default.createElement(
          _Label2.default,
          { idPrefix: dropdownId },
          this.props.label
        ),
        _react2.default.createElement(
          "div",
          {
            className: "dropdown-selector",
            onClick: this.handleSelectorClick.bind(this) },
          items.keys.selected.map(function (itemKey) {
            return _react2.default.createElement(_SelectedItem2.default, _extends({
              key: itemKey,
              idPrefix: dropdownId
            }, items.collection[itemKey], {
              onClick: _this7.handleSelectedItemClick.bind(_this7, itemKey) }));
          }),
          _react2.default.createElement(_SearchInput2.default, {
            ref: "searchInput",
            idPrefix: dropdownId,
            value: this.state.searchValue,
            placeholder: this.props.placeholder,
            onChange: this.handleSearchInputChange.bind(this),
            onFocus: this.handleSearchInputFocus.bind(this),
            onBlur: this.handleSearchInputBlur.bind(this),
            onKeyDown: this.handleSearchInputKeyDown.bind(this) })
        ),
        _react2.default.createElement(
          _Items2.default,
          {
            ref: "items",
            idPrefix: dropdownId,
            focusedItem: this.state.focusedItem },
          items.keys.displayed.map(function (itemKey) {
            return _react2.default.createElement(_Item2.default, _extends({
              ref: "item-" + itemKey,
              key: itemKey,
              idPrefix: dropdownId
            }, items.collection[itemKey], {
              selected: !! ~items.keys.selected.indexOf(itemKey),
              showImages: _this7.props.showImages,
              onClick: _this7.handleItemClick.bind(_this7, itemKey),
              onHover: _this7.handleItemHover.bind(_this7, itemKey) }));
          })
        )
      );
    }
  }]);

  return ReactUIDropdown;
})(_react.Component);

exports.default = ReactUIDropdown;

ReactUIDropdown.propTypes = {
  initialItems: _react.PropTypes.array.isRequired,
  remoteSearch: _react.PropTypes.shape({
    url: _react2.default.PropTypes.string,
    fields: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.string])
  }),
  maxDisplayedItems: _react.PropTypes.number,
  label: _react.PropTypes.string.isRequired,
  placeholder: _react.PropTypes.string,
  showImages: _react.PropTypes.bool,
  multiple: _react.PropTypes.bool,
  onChange: _react.PropTypes.func
};
ReactUIDropdown.defaultProps = {
  maxDisplayedItems: 10,
  showImages: true,
  multiple: true
};